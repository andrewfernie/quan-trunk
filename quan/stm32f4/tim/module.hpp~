#ifndef QUAN_STM32F4_TIM_MODULE_HPP_INCLUDED
#define QUAN_STM32F4_TIM_MODULE_HPP_INCLUDED

#include <quan/stm32f4/config.hpp>
#include <quan/stm32f4/periph_reg.hpp>
#include <quan/stm32f4/undefined_reg.hpp>
#include <quan/meta/eval_if.hpp>
#include <quan/meta/type_sequence.hpp>
#include <quan/meta/if.hpp>
#include <quan/meta/copy_if.hpp>
#include <quan/stm32f4/tim/detail/has_periph_reg_xx.hpp>

namespace quan{ namespace stm32f4{

  struct Tim; // Concept
   
    namespace tim {

       template <uint32_t N>
       struct channel;
     
       template <uint32_t Address>
       struct module{

         typedef uint32_t value_type;
         static constexpr value_type address = Address;

         typedef module type;
         
#define QUAN_STM32F4_IF_REG( Name , Address)  \
   typedef typename quan::meta::eval_if< \
      quan::stm32f4::tim::detail::has_ ## Name <type>, \
      quan::stm32f4::periph_reg<type, Address >, \
      quan::stm32f4::undefined_reg<type, Address >  \
   >::type Name ## _type;

         typedef quan::stm32f4::periph_reg<type,0x0>  cr1_type;
         QUAN_STM32F4_IF_REG(cr2,0x04)
         QUAN_STM32F4_IF_REG(smcr,0x08)
         typedef quan::stm32f4::periph_reg<type,0x0C> dier_type;
         typedef quan::stm32f4::periph_reg<type,0x10> sr_type;
         typedef quan::stm32f4::periph_reg<type,0x14> egr_type;
         QUAN_STM32F4_IF_REG(ccmr1,0x18)
         QUAN_STM32F4_IF_REG(ccmr2,0x1C)
         QUAN_STM32F4_IF_REG(ccer,0x20)
         typedef volatile uint32_t cnt_type;
         typedef volatile uint32_t psc_type;
         typedef volatile uint32_t arr_type;
         typedef volatile uint32_t rcr_type;
         typedef volatile uint32_t ccr1_type;
         typedef volatile uint32_t ccr2_type;
         typedef volatile uint32_t ccr3_type;
         typedef volatile uint32_t ccr4_type;
         QUAN_STM32F4_IF_REG(bdtr,0x44)
         QUAN_STM32F4_IF_REG(dcr,0x48)
         typedef volatile uint32_t dmar_type;
         QUAN_STM32F4_IF_REG(or_,0x50)

#undef QUAN_STM32F4_IF_REG
                                         
         cr1_type cr1;
         cr2_type cr2;                      
         smcr_type smcr;
         dier_type dier;
         sr_type sr;
         egr_type egr;
         ccmr1_type ccmr1;
         ccmr2_type ccmr2;
         ccer_type ccer;
         cnt_type cnt;
         psc_type psc;
         arr_type arr;
         rcr_type rcr;
         ccr1_type ccr1;
         ccr2_type ccr2;
         ccr3_type ccr3;
         ccr4_type ccr4;
         bdtr_type bdtr;                               
         dcr_type dcr; 
         dmar_type dmar;
         or__type or_ ;

         // remove any undefined registers from lookup
         typedef typename quan::meta::copy_if<
            quan::meta::type_sequence<  
               cr1_type,
               cr2_type,                    
               smcr_type,
               dier_type,
               sr_type,
               egr_type,
               ccmr1_type,
               ccmr2_type,
               ccer_type,
               cnt_type,
               psc_type,
               arr_type,
               rcr_type,
               ccr1_type,
               ccr2_type,
               ccr3_type,
               ccr4_type,
               bdtr_type,
               dcr_type,
               dmar_type,
               or__type
            >,
            quan::stm32f4::detail::periph_reg_is_defined  
         >::type periph_reg_list;

         static constexpr module* get(){ return reinterpret_cast<module*>(address);}

       private:
         
         module() = delete;
         module(module const &) = delete;
         module& operator = (module const & ) = delete;
      };

   }//tim
}}//quan::stm32f4

namespace quan{ namespace impl{

    // make module a model of quan::stm32f4::Gpio
   template <uint32_t Address>
   struct is_model_of_impl<
      quan::stm32f4::Tim,
      quan::stm32f4::tim::module<Address> 
	> : quan::meta::true_{};

}}

#endif // QUAN_STM32F4_TIM_MODULE_HPP_INCLUDED
